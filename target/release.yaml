kind: Namespace
apiVersion: v1
metadata:
  name: ctlog-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ctlog-system
  name: secret-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["ctlog-config"]
    verbs: ["get", "update"]
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-operator
  namespace: ctlog-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-operator
subjects:
  - kind: ServiceAccount
    name: createctconfig
    namespace: ctlog-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ctlog-config
  namespace: ctlog-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: createctconfig
  namespace: ctlog-system

---
apiVersion: batch/v1
kind: Job
metadata:
  name: createctconfig
  namespace: ctlog-system
spec:
  backoffLimit: 12
  template:
    spec:
      serviceAccountName: createctconfig
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createctconfig
          image: ghcr.io/sigstore/scaffolding/createctconfig@sha256:7412243415a984b697a630b2f0b322a519285abc5c458053790e4e5f9a4156b2
          args: ["--namespace=ctlog-system", "--configmap=ctlog-config", "--secret=ctlog-secret"]

---
kind: Namespace
apiVersion: v1
metadata:
  name: ctlog-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: ctlog-system
  name: cm-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["ctlog-config"]
    verbs: ["get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: role-cm-updater
  namespace: ctlog-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cm-operator
subjects:
  - kind: ServiceAccount
    name: createtree
    namespace: ctlog-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ctlog-config
  namespace: ctlog-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: createtree
  namespace: ctlog-system

---
apiVersion: batch/v1
kind: Job
metadata:
  name: createtree
  namespace: ctlog-system
spec:
  template:
    spec:
      serviceAccountName: createtree
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createtree
          image: ghcr.io/sigstore/scaffolding/createtree@sha256:b8bbd91bafb1312719ae0d1a59c1deec3c90e74d5f91a16c419841f786b8fc96
          args: ["--namespace=ctlog-system", "--configmap=ctlog-config", "--display_name=ctlogtree"]

---
kind: Namespace
apiVersion: v1
metadata:
  name: ctlog-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ctlog-config
  namespace: ctlog-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctlog
  namespace: ctlog-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ctlog
  namespace: ctlog-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: ctlog-system
  name: ctlog
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    spec:
      serviceAccountName: ctlog
      containers:
        - name: ctfe
          image: ghcr.io/sigstore/scaffolding/ct_server@sha256:6f5ec5dbff8f886b3b56ff206b8e836fe564bbd64a1436ac8c5e7ae341163e24
          args: ["--http_endpoint=0.0.0.0:6962", "--log_config=/ctfe-config/ct_server.cfg", "--alsologtostderr"]
          volumeMounts:
            - name: keys
              mountPath: "/ctfe-keys"
              readOnly: true
            - name: config
              mountPath: "/ctfe-config"
              readOnly: true
          ports:
            - containerPort: 6962
      volumes:
        - name: keys
          secret:
            secretName: ctlog-secret
            items:
              - key: private
                path: privkey.pem
              - key: public
                path: pubkey.pem
              - key: rootca
                path: roots.pem
        - name: config
          configMap:
            name: ctlog-config
            items:
              - key: config
                path: ct_server.cfg

---
kind: Namespace
apiVersion: v1
metadata:
  name: fulcio-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: fulcio-system
  name: secret-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["secrets"]
    verbs: ["create", "get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: secret-operator
  namespace: fulcio-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: secret-operator
subjects:
  - kind: ServiceAccount
    name: createcerts
    namespace: fulcio-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: createcerts
  namespace: fulcio-system

---
apiVersion: batch/v1
kind: Job
metadata:
  name: createcerts
  namespace: fulcio-system
spec:
  template:
    spec:
      serviceAccountName: createcerts
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createcerts
          image: ghcr.io/sigstore/scaffolding/createcerts@sha256:063c47d092ed1ce116ad06b3e62169abb250d959ba3eb466d7f25cc11124287a
          args: ["--secret=fulcio-secret"]
          env:
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace

---
kind: Namespace
apiVersion: v1
metadata:
  name: fulcio-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: fulcio-config
  namespace: fulcio-system
data:
  config.json: |-
    {
      "OIDCIssuers": {
        "https://kubernetes.default.svc": {
          "IssuerURL": "https://kubernetes.default.svc",
          "ClientID": "sigstore",
          "Type": "kubernetes"
        },
        "https://accounts.google.com": {
          "IssuerURL": "https://accounts.google.com",
          "ClientID": "sigstore",
          "Type": "email"
        },
        "https://oauth2.sigstore.dev/auth": {
          "IssuerURL": "https://oauth2.sigstore.dev/auth",
          "ClientID": "sigstore",
          "Type": "email",
          "IssuerClaim": "$.federated_claims.connector_id"
        },
        "https://token.actions.githubusercontent.com": {
          "IssuerURL": "https://token.actions.githubusercontent.com",
          "ClientID": "sigstore",
          "Type": "github-workflow"
        }
      },
      "MetaIssuers": {
        "https://kubernetes.*.svc": {
          "ClientID": "sigstore",
          "Type": "kubernetes"
        }
      }
    }

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fulcio
  namespace: fulcio-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: fulcio-system
  name: fulcio
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/min-scale: "1"
    spec:
      serviceAccountName: fulcio
      # This doesn't actually use Kubernetes credentials, so don't mount them in.
      automountServiceAccountToken: false
      containers:
        # v0.2.0
        - image: gcr.io/projectsigstore/fulcio@sha256:5e4b883737007224a4a7aad2957d1d2d809c8fc81dae30079914cd8142e6ac8c
          name: fulcio
          ports:
            - containerPort: 5555
          args:
            - "serve"
            - "--port=5555"
            - "--ca=fileca"
            - "--fileca-key"
            - "/var/run/fulcio-secrets/key.pem"
            - "--fileca-cert"
            - "/var/run/fulcio-secrets/cert.pem"
            - "--fileca-key-passwd"
            - "$(PASSWORD)"
            - "--ct-log-url=http://ctlog.ctlog-system.svc/sigstorescaffolding"
          env:
            - name: PASSWORD
              valueFrom:
                secretKeyRef:
                  name: fulcio-secret
                  key: password
          volumeMounts:
            - name: fulcio-config
              mountPath: /etc/fulcio-config
            - name: oidc-info
              mountPath: /var/run/fulcio
            - name: fulcio-cert
              mountPath: "/var/run/fulcio-secrets"
              readOnly: true
      volumes:
        - name: fulcio-config
          configMap:
            name: fulcio-config
        - name: fulcio-cert
          secret:
            secretName: fulcio-secret
            items:
              - key: private
                path: key.pem
              - key: cert
                path: cert.pem
        - name: oidc-info
          projected:
            sources:
              - configMap:
                  name: kube-root-ca.crt
                  items:
                    - key: ca.crt
                      path: ca.crt
                      mode: 0666

---
kind: Namespace
apiVersion: v1
metadata:
  name: rekor-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: rekor-system
  name: cm-operator
rules:
  - apiGroups: [""] # "" indicates the core API group
    resources: ["configmaps"]
    resourceNames: ["rekor-config"]
    verbs: ["get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: role-cm-updater
  namespace: rekor-system
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cm-operator
subjects:
  - kind: ServiceAccount
    name: createtree
    namespace: rekor-system

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: rekor-config
  namespace: rekor-system
data:
  __placeholder: |
    ###################################################################
    # Just a placeholder so that reapplying this won't overwrite treeID
    # if it already exists. This caused grief, do not remove.
    ###################################################################

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: createtree
  namespace: rekor-system

---
apiVersion: batch/v1
kind: Job
metadata:
  name: createtree
  namespace: rekor-system
spec:
  template:
    spec:
      serviceAccountName: createtree
      restartPolicy: Never
      automountServiceAccountToken: true
      containers:
        - name: createtree
          image: ghcr.io/sigstore/scaffolding/createtree@sha256:b8bbd91bafb1312719ae0d1a59c1deec3c90e74d5f91a16c419841f786b8fc96

---
kind: Namespace
apiVersion: v1
metadata:
  name: rekor-system

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: rekor-system
spec:
  ports:
    - port: 6379
  selector:
    app: redis
  clusterIP: None
---
apiVersion: v1
kind: Pod
metadata:
  name: redis
  namespace: rekor-system
  labels:
    app: redis
spec:
  containers:
    - image: docker.io/redis:5.0.10
      name: redis
      args: ["--bind", "0.0.0.0", "--appendonly", "yes"]
      ports:
        - containerPort: 6379
          name: redis

---
kind: Namespace
apiVersion: v1
metadata:
  name: rekor-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rekor
  namespace: rekor-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: rekor-system
  name: rekor
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/min-scale: "1"
    spec:
      serviceAccountName: rekor
      containers:
        - name: rekor
          image: gcr.io/projectsigstore/rekor-server@sha256:516651575db19412c94d4260349a84a9c30b37b5d2635232fba669262c5cbfa6
          ports:
            - containerPort: 3000
          args: ["serve", "--trillian_log_server.address=log-server.trillian-system.svc", "--trillian_log_server.port=80", "--rekor_server.address=0.0.0.0", "--redis_server.address=redis.rekor-system.svc", "--redis_server.port=6379", "--enable_retrieve_api=true", "--trillian_log_server.tlog_id=$(TREE_ID)", "--log_type=prod", "--rekor_server.signer=memory", "--enable_attestation_storage=true", "--attestation_storage_bucket=file:///tmp/"]
          #          "--rekor_server.timestamp_chain=$(TIMESTAMP_CHAIN)"

          env:
            - name: TREE_ID
              valueFrom:
                configMapKeyRef:
                  name: rekor-config
                  key: treeID

---
kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---
apiVersion: v1
kind: Secret
metadata:
  name: trillian-client
  namespace: trillian-system
type: kubernetes.io/basic-auth
stringData:
  host: mysql-trillian.trillian-system.svc
  name: trillian
  username: trillian
  password: trillian

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: createdb
  namespace: trillian-system

---
apiVersion: batch/v1
kind: Job
metadata:
  name: createdb
  namespace: trillian-system
spec:
  template:
    spec:
      serviceAccountName: createdb
      restartPolicy: Never
      containers:
        - name: createdb
          image: ghcr.io/sigstore/scaffolding/createdb@sha256:34969df8034ffe1b50696ae490f613136dadb88e5a23b6f2a2beaeb1fb458ccb
          args: ["--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(DATABASE_HOSTNAME):3306)/", "--db_name=trillian"]
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: name
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: password
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: trillian-client
                  key: host

---
kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---
apiVersion: v1
kind: Secret
metadata:
  name: trillian-database
  namespace: trillian-system
type: kubernetes.io/basic-auth
stringData:
  host: mysql-trillian.trillian-system.svc
  database-name: trillian
  username: trillian
  password: trillian

---
apiVersion: v1
kind: Service
metadata:
  name: mysql-trillian
  namespace: trillian-system
spec:
  ports:
    - port: 3306
  selector:
    app: mysql-trillian
  clusterIP: None
---
apiVersion: v1
kind: Pod
metadata:
  name: mysql-trillian
  namespace: trillian-system
  labels:
    app: mysql-trillian
spec:
  containers:
    - image: gcr.io/trillian-opensource-ci/db_server@sha256:e58334fead37d1f03c77c80f66008966e79739d85214b373b3c0a69f97c59359
      name: mysql
      env:
        - name: MYSQL_ROOT_PASSWORD
          value: trillian
        - name: MYSQL_DATABASE
          valueFrom:
            secretKeyRef:
              name: trillian-database
              key: database-name
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: trillian-database
              key: username
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: trillian-database
              key: password
      ports:
        - containerPort: 3306
          name: mysql

---
kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trillian
  namespace: trillian-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: trillian-system
  name: log-server
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    spec:
      serviceAccountName: trillian
      containers:
        - name: log-server
          image: gcr.io/projectsigstore/trillian_log_server@sha256:f850a0defd089ea844822030c67ae05bc93c91168a7dd4aceb0b6648c39f696b
          args: ["--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(DATABASE_HOSTNAME):3306)/$(DATABASE_NAME)", "--mysql_max_idle_conns=0", "--tree_gc=false", "--storage_system=mysql", "--quota_system=mysql",
            #        "--etcd_servers=trillian-etcd-cluster-client.etcd-system.svc:2379",
            #        "--etcd_http_service=trillian-logserver-http",
            "--rpc_endpoint=0.0.0.0:8090",
            #        "--http_endpoint=0.0.0.0:8091",
            "--alsologtostderr"]
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: database-name
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: password
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: host
          ports:
            - name: h2c
              containerPort: 8090

---
kind: Namespace
apiVersion: v1
metadata:
  name: trillian-system

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: trillian
  namespace: trillian-system
---
apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  namespace: trillian-system
  name: log-signer
  labels:
    networking.knative.dev/visibility: cluster-local
spec:
  template:
    metadata:
      annotations:
        # LogSigner is stateful service because it gives promises to flush
        # the SCT to persistent store.
        autoscaling.knative.dev/minScale: "1"
        autoscaling.knative.dev/maxScale: "1"
    spec:
      serviceAccountName: trillian
      containers:
        - name: log-signer
          args: ["--mysql_uri=$(MYSQL_USER):$(MYSQL_PASSWORD)@tcp($(DATABASE_HOSTNAME):3306)/$(DATABASE_NAME)", "--storage_system=mysql",
            # Either force the master, or use the etcd looks like are the only
            # two options. For now, just use this until we sort etcd stuff out.
            "--force_master",
            #        "--etcd_servers=trillian-etcd-cluster-client.etcd-system.svc:2379",
            "--quota_system=mysql",
            #        "--etcd_http_service=trillian-logsigner-http",
            #        "--http_endpoint=0.0.0.0:8091",
            "--sequencer_guard_window=1s", "--sequencer_interval=20ms", "--num_sequencers=10", "--batch_size=500",
            # No idea what this is...
            # "$(SIGNER_DEQUEUE_BUCKET_FRACTION)",
            "--master_hold_jitter=7200s", "--alsologtostderr"]
          env:
            - name: DATABASE_NAME
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: database-name
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: password
            - name: DATABASE_HOSTNAME
              valueFrom:
                secretKeyRef:
                  name: trillian-database
                  key: host
          image: gcr.io/projectsigstore/trillian_log_signer@sha256:fe90d523f6617974f70878918e4b31d49b2b46a86024bb2d6b01d2bbfed8edbf
          ports:
            - name: h2c
              containerPort: 8090

---
